name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 black isort
        # Install any additional dependencies if requirements.txt exists
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Test database setup
      run: |
        cd db
        python setup_database.py --db-path test_ai_insights.db
        ls -la test_ai_insights.db

    - name: Test database functionality
      run: |
        cd db
        python test_database.py --db-path test_ai_insights.db

    - name: Run pytest (if test files exist)
      run: |
        if [ -d "tests" ] || find . -name "test_*.py" -o -name "*_test.py" | head -1; then
          pytest --cov=. --cov-report=xml
        else
          echo "No pytest test files found, skipping pytest"
        fi

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  database-validation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up database with sample data
      run: |
        cd db
        python setup_database.py --db-path ci_test.db

    - name: Validate database structure and data
      run: |
        cd db
        python test_database.py --db-path ci_test.db

    - name: Run query examples (if available)
      run: |
        cd db
        if [ -f "query_examples.py" ]; then
          python query_examples.py --db-path ci_test.db
        fi

    - name: Check database file size
      run: |
        cd db
        ls -lh ci_test.db
        # Fail if database is empty (less than 1KB)
        size=$(stat -c%s ci_test.db)
        if [ $size -lt 1024 ]; then
          echo "Database file is too small, something went wrong"
          exit 1
        fi

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-artifacts:
    runs-on: ubuntu-latest
    needs: [test, database-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Build production database
      run: |
        cd db
        python setup_database.py --db-path ../ai_insights_prod.db

    - name: Validate production database
      run: |
        cd db
        python test_database.py --db-path ../ai_insights_prod.db

    - name: Upload database artifact
      uses: actions/upload-artifact@v3
      with:
        name: ai-insights-database
        path: ai_insights_prod.db
        retention-days: 30

    - name: Create release (if tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ai_insights_prod.db
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 